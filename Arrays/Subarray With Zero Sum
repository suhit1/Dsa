// problem link :- https://takeuforward.org/data-structure/length-of-the-longest-subarray-with-zero-sum/

// Brute
        int a[] = {9, -3, 3, -1, 6, -5};
        int  max = 0;
        for(int i = 0; i < a.length; ++i){
            int sum = 0;
            for(int j = i; j < a.length; ++j){
                sum += a[j];
                if(sum == 0){
                    max = Math.max(max, j-i+1);
                }
            }
        }
        System.out.println(max);

//optimal

int a[] = {9, -3, 3, -1, 6, -5};
        int n = a.length;
        HashMap<Integer, Integer> mpp = new HashMap<>();

        int maxi = 0;
        int sum = 0;

        for(int i = 0;i<n;i++) {
            // adding prefix sum
            sum += a[i];

            // if we will get sum as 0 directly it means from start till present index sub-array sum is coming as zero
            if(sum == 0) {
                maxi = i + 1;
            }
            else {
                // checking if prefix sum is present in our array or not
                if(mpp.get(sum) != null) {
                    // if present will be storing max length
                    maxi = Math.max(maxi, i - mpp.get(sum));
                }
                else {
                    // if not will be storing prefix sum in map with current index till where the prefix sum is
                    mpp.put(sum, i);
                }
            }
        }
        System.out.println(maxi);