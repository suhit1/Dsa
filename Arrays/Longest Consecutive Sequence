// Problem Link :- https://leetcode.com/problems/longest-consecutive-sequence/description/

// Brute
        int[] arr = {1,0,1,2};
        int n = arr.length;
        int longestSeq = 1,count=1;

        for(int i=0;i<n;i++){

            int el = arr[i];
            count = 1;
            int x = el+1;

            while(linearSearch(arr, x)){
                x++;
                count++;
            }

            longestSeq = Math.max(longestSeq,count);
        }

        System.out.println(longestSeq);


    }

    public static boolean linearSearch(int[] arr,int num){
        for (int i=0;i<arr.length;i++){
            if(arr[i]  == num){
                return true;
            }
        }
        return false;
    }

// Better

int lastSmaller = Integer.MIN_VALUE,count=0,maxSeq=1;
        Arrays.sort(arr);
        for(int i=0;i<arr.length;i++){
            if(lastSmaller == arr[i] -1){
                count++;
                lastSmaller = arr[i];
            }else if(lastSmaller != arr[i]){
                count = 1;
                lastSmaller = arr[i];
            }

            maxSeq = Math.max(maxSeq,count);
        }
        return maxSeq;

// optimal

// Better
        int[] a = {100, 200, 1, 2, 3, 4};
        int n = a.length;
        if (n == 0)
            System.out.println(0);

        int longest = 1;
        Set<Integer> set = new HashSet<>();

        // put all the array elements into set
        for (int i = 0; i < n; i++) {
            set.add(a[i]);
        }

        // iterating over set
        for(int it:set){

            // checking for start of sequence
            if( !set.contains(it - 1) ){
                int count = 1;
                int x = it;
                while(set.contains(x +1)){
                    count++;
                    x++;
                }

                longest = Math.max(longest,count);
            }

        }
        System.out.println(longest);