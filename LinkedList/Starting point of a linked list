// Problem link :- https://leetcode.com/problems/linked-list-cycle-ii/description/

// Brute

1) Run a while loop till node != null
2) Take a stack and keep on pushing all the nodes in it
3) if we will get any node which is already in the stack then we have found the starting point

// Optimal

public class Solution {
    public ListNode detectCycle(ListNode head) {
        // Initialize a slow and fast
        // pointers to the head of the list
        ListNode slow = head;
        ListNode fast = head;

        // Phase 1: Detect the loop
        while (fast != null && fast.next != null) {
            // Move slow one step
            slow = slow.next;

            // Move fast two steps
            fast = fast.next.next;

            // If slow and fast meet loop is detected
            if (slow == fast) {
                // Reset the slow pointer to the head of the list
                slow = head;

                // Phase 2: Find the starting point of the loop
                while (slow != fast) {
                    // Move slow and fast node at the same pace
                    slow = slow.next;
                    fast = fast.next;

                    // When slow and fast meet again,
                    // it's the first node of the loop
                }

                // Return the first node of the loop
                return slow;
            }
        }

        // If no loop is found, return null
        return null;
    }
}